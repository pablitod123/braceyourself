<style>
 
text {
  font: 22px Arial;
}
 
rect.background {
  fill: white;
}
 
.axis {
  shape-rendering: crispEdges;
}
 
.axis path,
.axis line {
  fill: none;
  stroke: #000;
}
 
</style>

<body>
<div class = "row">
  <div class = "centered six columns">
    <div id="patient_name">
      <%= @thispatient.fname %> <%= @thispatient.lname%>
    </div>
  </div>
</div>

    <div id = "back_to_list" class = "large primary btn">
        <%= link_to 'Back to Patient List', '/doctors/' + params[:id].to_s %>
    </div>
    <div id = "editsettings" class = "large warning btn">
          <input name="updateButton" type="button" value="Edit Prescription" />
    </div>


 <div class= "row">
  <div class = "compcont">
    <div class = "twelve columns" id="compliance_container">
      <h2>Compliance Rate:</h2>
      <div id="compliance"></div>
    </div>
  </div>
</div>

<div class = "c3container">
  <div class = "row">
    <div class = "four columns">
      <div id='pos_chart'></div>
      <h2> Position Goal </h2>
    </div>
    <div class = "four columns"><div id="viewdesc"></div></div>
    <div class = "four columns">
      <div id='force_chart'></div>
      <h2> Force Goal </h2>
    </div>
  </div>
</div>


<div class = "row">
  <div class = "buttoncont">
    <div class = "twelve columns">
      <div class = "medium primary btn">
        <input name="updateButton" type="button" value="One day view" onclick="updateData()" />
      </div>
      <div class = "medium secondary btn">
        <input name="updateButton" type="button" value="Reset" onclick="resetData()" />
      </div>
    </div>
  </div>
</div>
<br>
<!--   <div id="separate"></div> -->
<div class = "row">
    <div id="drilldown"></div>
</div>
  


<script>
resetData();
function resetData(){
d3.select("#drilldown").html('');

var margin = {top: 30, right: 60, bottom: 0, left: 120},
    width = 1200 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;
 
var x = d3.scale.linear()
    .range([0, width]);
 
var barHeight = 40;
 
var color = d3.scale.ordinal()
    .range(["steelblue", "#ccc"]);
 
var duration = 750,
    delay = 25;
 
var partition = d3.layout.tree() // partition to tree removes value sorting
    .value(function(d) { return d.size; });
 
var xAxis = d3.svg.axis()
    .scale(x)
    .orient("top");
 
var svg = d3.select("#drilldown").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 
svg.append("rect")
    .attr("class", "background")
    .attr("width", width)
    .attr("height", height)
    .on("click", up);
 
svg.append("g")
    .attr("class", "x axis");
 
svg.append("g")
    .attr("class", "y axis")
  .append("line")
    .attr("y1", "100%");
 
d3.json("/readme.json", function(error, root) {
  partition.nodes(root);
  x.domain([0, root.value]).nice();
  down(root, 0);
});

// if (typeof percent === 'undefined') {
//   var percent =20.0;
// }

function blah(num) {
   get_gauge_data(num);
}

function get_gauge_data(num) {
  if (num == "allmonths") {
    <% progress_bar("allmonths", params[:patient_id]) %>
    pos_chart.unload(['data']); 
    pos_chart.load({
      columns: [
        ['data', <%= @position_percentage %>]
      ]
    });
    force_chart.unload(['data']); 
    force_chart.load({
      columns: [
        ['data', <%= @force_percentage %>]
      ]
    });
    document.getElementById("compliance").innerHTML = <%=@compliance_percentage%>;
    document.getElementById("viewdesc").innerHTML = "All Months View";
  };

  if (num == "month") {
    <% progress_bar("month", params[:patient_id]) %>
    pos_chart.unload(['data']); 
    pos_chart.load({
      columns: [
        ['data', <%= @position_percentage %>]
      ]
    });
    force_chart.unload(['data']); 
    force_chart.load({
      columns: [
        ['data', <%= @force_percentage %>]
      ]
    });
    document.getElementById("compliance").innerHTML = <%=@compliance_percentage%>;
    document.getElementById("viewdesc").innerHTML = "Month View";
  };
  if (num == "week") {
    <% progress_bar("week", params[:patient_id]) %>
    pos_chart.unload(['data']); 
    pos_chart.load({
      columns: [
        ['data', <%= @position_percentage %>]
      ]
    });
    force_chart.unload(['data']); 
    force_chart.load({
      columns: [
        ['data', <%= @force_percentage %>]
      ]
    });
    document.getElementById("compliance").innerHTML = <%=@compliance_percentage%>;
    document.getElementById("viewdesc").innerHTML = "Week View";
  };
}
 
function down(d, i) {
  if (!d.children || this.__transition__) return;
  var end = duration + d.children.length * delay;
 
  // Mark any currently-displayed bars as exiting.
  var exit = svg.selectAll(".enter")
      .attr("class", "exit");
 
  // Entering nodes immediately obscure the clicked-on bar, so hide it.
  exit.selectAll("rect").filter(function(p) { return p === d; })
      .style("fill-opacity", 1e-6);
 
  // Enter the new bars for the clicked-on data.
  // Per above, entering bars are immediately visible.
  var enter = bar(d)
      .attr("transform", stack(i))
      .style("opacity", 1);
 
  // Have the text fade-in, even though the bars are visible.
  // Color the bars as parents; they will fade to children if appropriate.
  enter.select("text").style("fill-opacity", 1e-6);
  enter.select("rect").style("fill", color(true));
 
  // Update the x-scale domain.
  x.domain([0, d3.max(d.children, function(d) { return d.value; })]).nice();
 
  // Update the x-axis.
  svg.selectAll(".x.axis").transition()
      .duration(duration)
      .call(xAxis);
 
  // Transition entering bars to their new position.
  var enterTransition = enter.transition()
      .duration(duration)
      .delay(function(d, i) { return i * delay; })
      .attr("transform", function(d, i) { return "translate(0," + barHeight * i * 1.2 + ")"; });
 
  // Transition entering text.
  enterTransition.select("text")
      .style("fill-opacity", 1);
 
  // Transition entering rects to the new x-scale.
  enterTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .style("fill", function(d) { return color(!!d.children); });
 
  // Transition exiting bars to fade out.
  var exitTransition = exit.transition()
      .duration(duration)
      .style("opacity", 1e-6)
      .remove();
 
  // Transition exiting bars to the new x-scale.
  exitTransition.selectAll("rect")
      .attr("width", function(d) { return x(d.value); });
 
  // Rebind the current node to the background.
  svg.select(".background")
      .datum(d)
    .transition()
      .duration(end);
 
  d.index = i;

  // if (d.parent == undefined) {
  //   blah('By Month');
  // }

  var c = d.children.length
  if (c == 5) {
    blah('allmonths');
  }

  if (c == 4) {
    blah('month');
  }

  if (c == 7) {
    blah('week');
  }
}
 
function up(d) {
  if (!d.parent || this.__transition__) return;
  var end = duration + d.children.length * delay;
 
  // Mark any currently-displayed bars as exiting.
  var exit = svg.selectAll(".enter")
      .attr("class", "exit");
 
  // Enter the new bars for the clicked-on data's parent.
  var enter = bar(d.parent)
      .attr("transform", function(d, i) { return "translate(0," + barHeight * i * 1.2 + ")"; })
      .style("opacity", 1e-6);
 
  // Color the bars as appropriate.
  // Exiting nodes will obscure the parent bar, so hide it.
  enter.select("rect")
      .style("fill", function(d) { return color(!!d.children); })
    .filter(function(p) { return p === d; })
      .style("fill-opacity", 1e-6);
 
  // Update the x-scale domain.
  x.domain([0, d3.max(d.parent.children, function(d) { return d.value; })]).nice();
 
  // Update the x-axis.
  svg.selectAll(".x.axis").transition()
      .duration(duration)
      .call(xAxis);
 
  // Transition entering bars to fade in over the full duration.
  var enterTransition = enter.transition()
      .duration(end)
      .style("opacity", 1);
 
  // Transition entering rects to the new x-scale.
  // When the entering parent rect is done, make it visible!
  enterTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .each("end", function(p) { if (p === d) d3.select(this).style("fill-opacity", null); });
 
  // Transition exiting bars to the parent's position.
  var exitTransition = exit.selectAll("g").transition()
      .duration(duration)
      .delay(function(d, i) { return i * delay; })
      .attr("transform", stack(d.index));
 
  // Transition exiting text to fade out.
  exitTransition.select("text")
      .style("fill-opacity", 1e-6);
 
  // Transition exiting rects to the new scale and fade to parent color.
  exitTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .style("fill", color(true));
 
  // Remove exiting nodes when the last child has finished transitioning.
  exit.transition()
      .duration(end)
      .remove();
 
  // Rebind the current parent to the background.
  svg.select(".background")
      .datum(d.parent)
    .transition()
      .duration(end);

  var c = d.children.length
  if (c == 4) {
    blah("allmonths");
  }

  if (c == 7) {
    blah("month");
  }
}
 
// Creates a set of bars for the given data node, at the specified index.
function bar(d) {
  var bar = svg.insert("g", ".y.axis")
      .attr("class", "enter")
      .attr("transform", "translate(0,5)")
    .selectAll("g")
      .data(d.children)
    .enter().append("g")
      .style("cursor", function(d) { return !d.children ? null : "pointer"; })
      .on("click", down);
 
  bar.append("text")
      .attr("x", -6)
      .attr("y", barHeight / 2)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d.name; });
 
  bar.append("rect")
      .attr("width", function(d) { return x(d.value); })
      .attr("height", barHeight);
 
  return bar;
}
 
// A stateful closure for stacking bars horizontally.
function stack(i) {
  var x0 = 0;
  return function(d) {
    var tx = "translate(" + x0 + "," + barHeight * i * 1.2 + ")";
    x0 += x(d.value);
    return tx;
  };
}

};

var pos_chart = c3.generate({
    data: {
        columns: [
            ['data', 93]
        ],
        type: 'gauge'
    },
    tooltip: {
        show: false
    },
    bindto: '#pos_chart',
    gauge: {
//        label: {
//            format: function(value, ratio) {
//                return value;
//            },
//            show: false // to turn off the min/max labels.
//        },
//    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
//    max: 100, // 100 is default
//    units: ' %',
//    width: 39 // for adjusting arc thickness
    },
    color: {
        pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
        threshold: {
//            unit: 'value', // percentage is default
//            max: 200, // 100 is default
            values: [30, 60, 90, 100]
        }
    }
});

var force_chart = c3.generate({
    data: {
        columns: [
            ['data', 91]
        ],
        type: 'gauge'
    },
    tooltip: {
        show: false
    },
    bindto: '#force_chart',
    gauge: {
//        label: {
//            format: function(value, ratio) {
//                return value;
//            },
//            show: false // to turn off the min/max labels.
//        },
//    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
//    max: 100, // 100 is default
//    units: ' %',
//    width: 39 // for adjusting arc thickness
    },
    color: {
        pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
        threshold: {
//            unit: 'value', // percentage is default
//            max: 200, // 100 is default
            values: [30, 60, 90, 100]
        }
    }
});

function updateData() {

// document.getElementById(#drilldown).innerHTML = "";
d3.select("#drilldown").html('');

var margin = {top: 0, right: 20, bottom: 30, left: 50},
    width = 1200 - margin.left - margin.right,
    height = 600 - margin.top - margin.bottom;

// Parse the date / time
var format = d3.time.format("%a %b %d %Y %H:%M:%S GMT%Z (EDT)").parse;

// Set the ranges
var x = d3.time.scale().range([0, width]);
var y = d3.scale.linear().range([height, 0]);

// Define the axes
var xAxis = d3.svg.axis().scale(x)
    .orient("bottom").ticks(8);

var yAxis = d3.svg.axis().scale(y)
    .orient("left").ticks(5);

// Define the line
var valueline = d3.svg.line()
    .interpolate("basis")
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.Position); });
    
// Adds the svg canvas
var svg = d3.select("#drilldown")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", 
              "translate(" + margin.left + "," + margin.top + ")");

// Get the data
d3.csv("/every6minutes5.csv", function(error, data) {
    data.forEach(function(d) {
        d.date = format(d.date);
        d.Position = +d.Position;
    });

    var xAxis1d = d3.svg.axis().scale(x)
    .orient("bottom").ticks(10);

    var yAxis1d = d3.svg.axis().scale(y)
    .orient("left").ticks(5);

     var startDate = new Date(2014, 06, 14, 7, 24)
    var endDate = new Date(2014, 6, 15, 7, 24)
    // Scale the range of the data
    x.domain([startDate,endDate]);

   y.domain(d3.extent(data, function(d) { return d.Position; }));

    // Add the valueline path.
    svg.append("path")
        .attr("class", "line")
        .style({ 'stroke': 'Black', 'fill': 'none', 'stroke-width': '3px'})
        .attr("d", valueline(data));

    // Add the X Axis
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis1d);

    // Add the Y Axis
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis1d);

});
    <% progress_bar("day", params[:patient_id]) %>
    pos_chart.unload(['data']); 
    pos_chart.load({
      columns: [
        ['data', <%= @position_percentage %>]
      ]
    });
    force_chart.unload(['data']); 
    force_chart.load({
      columns: [
        ['data', <%= @force_percentage %>]
      ]
    });
    document.getElementById("compliance").innerHTML = <%=@compliance_percentage%>;
}



</script>
</body>